{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-blue",
    "glyph" : "newspaper"
  },
  "name" : "Tagesschau.de",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-blue; icon-glyph: newspaper;\n\n\/\/ name: tagesschau-widget.js\n\/\/ description: A scriptable widget which displays the latest tagesschau.de article ðŸ“°\n\/\/ author: Torben Haack\n\/\/ email: haack@hey.com\n\nlet tagesschauData;\ntry {\n  tagesschauData = await new Request(\n    'https:\/\/www.tagesschau.de\/api2\/homepage\/'\n  ).loadJSON();\n} catch (e) {\n  const errorWidget = createErrorWidget();\n\n  if (!config.runsInWidget) {\n    await errorWidget.presentMedium();\n  } else {\n    Script.setWidget(errorWidget);\n  }\n  Script.complete();\n}\nconst widget = await createWidget();\n\nif (!config.runsInWidget) {\n  await widget.presentMedium();\n} else {\n  Script.setWidget(widget);\n}\nScript.complete();\n\nasync function createWidget() {\n  let listWidget = new ListWidget();\n\n  listWidget.setPadding(15, 15, 15, 15);\n\n  listWidget.backgroundImage = await loadImage(\n    'http:\/\/www.tagesschau.de\/infoscreen\/img\/background-16-9-HD.png'\n  );\n\n  listWidget = await createHeaderImage(listWidget);\n\n  listWidget.addSpacer(10);\n\n  listWidget = await createArticle(listWidget, tagesschauData.news[0]);\n\n  return listWidget;\n}\n\nasync function createArticle(listWidget, data) {\n  const { title, shareURL } = data;\n  const date = new Date(data.date);\n  const image = data.teaserImage.videowebl.imageurl;\n  let { ressort } = data;\n\n  if (ressort == undefined) {\n    ressort = 'Sonstiges';\n  }\n\n  listWidget.url = shareURL;\n\n  listWidget.addSpacer(20);\n\n  const article = listWidget.addStack();\n\n  const articleImage = article.addImage(await loadImage(image));\n  articleImage.cornerRadius = 5;\n\n  article.addSpacer(10);\n\n  const articleInfo = article.addStack();\n  articleInfo.layoutVertically();\n\n  const articleRessort = articleInfo.addText(\n    ressort.charAt(0).toUpperCase() + ressort.slice(1)\n  );\n  articleRessort.textColor = Color.orange();\n  articleRessort.font = Font.semiboldMonospacedSystemFont(12);\n\n  const articleTitle = articleInfo.addText(title.replaceAll('+', '').trim());\n  articleTitle.textColor = Color.white();\n  articleTitle.font = Font.headline();\n  articleTitle.minimumScaleFactor = 0.5;\n\n  const articleDate = articleInfo.addText(formatDate(date));\n  articleDate.font = Font.semiboldMonospacedSystemFont(12);\n  articleDate.textOpacity = 0.7;\n  articleDate.textColor = Color.white()\n\n  listWidget.addSpacer(10);\n\n  return listWidget;\n}\n\nasync function createHeaderImage(listWidget) {\n  const headerImage = listWidget.addImage(\n    await loadImage(\n      'https:\/\/www.ard.de\/image\/461284\/16x9\/4788513279306625340\/320'\n    )\n  );\n  headerImage.imageSize = new Size(100, 5);\n  headerImage.tintColor = Color.white();\n  headerImage.centerAlignImage();\n  headerImage.applyFillingContentMode();\n\n  return listWidget;\n}\n\nfunction createErrorWidget() {\n  const errorWidget = new ListWidget();\n\n  const bgGradient = new LinearGradient();\n  bgGradient.locations = [0, 1];\n  bgGradient.colors = [new Color('#2D65AE'), new Color('#19274C')];\n\n  errorWidget.backgroundGradient = bgGradient;\n\n  const title = errorWidget.addText('tagesschau');\n  title.font = Font.headline();\n  title.centerAlignText();\n\n  errorWidget.addSpacer(10);\n\n  const errorText = errorWidget.addText(\n    'Es besteht keine Verbindung zum Internet.'\n  );\n  errorText.font = Font.semiboldMonospacedSystemFont(16);\n  errorText.textColor = Color.red();\n\n  const errorText2 = errorWidget.addText(\n    'Dieses Widget benÃ¶tigt eine Verbindung zum Internet um funktionieren zu kÃ¶nnen.'\n  );\n  errorText2.font = Font.regularRoundedSystemFont(14);\n  errorText2.textColor = Color.red();\n  errorText2.textOpacity = 0.6;\n\n  return errorWidget;\n}\n\nasync function loadImage(url) {\n  return await new Request(url).loadImage();\n}\n\nfunction formatDate(dateObject) {\n  return `${leadingZero(dateObject.getDate())}.${leadingZero(\n    dateObject.getMonth() + 1\n  )}.${dateObject.getFullYear()}, ${leadingZero(\n    dateObject.getHours()\n  )}:${leadingZero(dateObject.getMinutes())} Uhr`;\n}\n\nfunction leadingZero(input) {\n  return ('0' + input).slice(-2);\n}\n",
  "share_sheet_inputs" : [

  ]
}